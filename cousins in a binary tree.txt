/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    	static TreeNode node = null;

	public static int height(TreeNode root, int v) {
		if (root == null) {
			return -1;
		}
		if (root.val == v) {
			node = root;
			return 0;
		}


		int h1 = height(root.left, v);
		int h2 = height(root.right, v);

		if (h1 == -1 && h2 == -1) {

			return -1;
		} else {

			return Math.max(h1, h2) + 1;
		}

	}
    
    static TreeNode nodeofnode = null;

	public static void parentof(TreeNode root, TreeNode node) {
		if (root == null) {
			return;
		}
		if (root.left == node || root.right == node) {
			nodeofnode = root;
			return;
		}
		parentof(root.left, node);
		parentof(root.right, node);
	}
    
    public boolean isCousins(TreeNode root, int x, int y) {
    

		int h1 = height(root, x);
		// System.out.println(node.data);
		parentof(root, node);
        int ans1 = nodeofnode.val;
		// System.out.println("*******************"+nodeofnode.data);
		int h2 = height(root, y);
		// System.out.println(node.data);
		parentof(root, node);
		// System.out.println("*************"+nodeofnode.data);
        int ans2 = nodeofnode.val;
	
        if(h1 == h2 && ans1 != ans2) {
			return true;
		}else {
			return false;
		}
    }
}